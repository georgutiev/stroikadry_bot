import os
from telegram import Update, ReplyKeyboardMarkup, ReplyKeyboardRemove
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    filters,
    ConversationHandler,
    ContextTypes,
)

# --- –°–æ—Å—Ç–æ—è–Ω–∏—è ---
CHOOSING, CONTRACTOR_PLACE, CONTRACTOR_WORKERS, CONTRACTOR_CONTACT, \
WORKER_SPECIALTY, WORKER_RATE, WORKER_CONTACT = range(7)

CHANNEL_ID = -1002155394225  # —Ç–≤–æ–π –∫–∞–Ω–∞–ª

BOT_TOKEN = os.getenv("BOT_TOKEN")

# --- –ö–æ–º–∞–Ω–¥–∞ /start ---
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    reply_keyboard = [["üë∑ –ü–æ–¥—Ä—è–¥—á–∏–∫", "‚öí –†–∞–±–æ—á–∏–π", "‚ûï –î—Ä—É–≥–æ–µ"]]
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –í—ã–±–µ—Ä–∏, –∫—Ç–æ —Ç—ã:",
        reply_markup=ReplyKeyboardMarkup(
            reply_keyboard, resize_keyboard=True, one_time_keyboard=True
        ),
    )
    return CHOOSING

# --- –í–µ—Ç–≤—å –ü–æ–¥—Ä—è–¥—á–∏–∫ ---
async def contractor(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    await update.message.reply_text("–ì–¥–µ –Ω—É–∂–Ω—ã —Ä–∞–±–æ—á–∏–µ?", reply_markup=ReplyKeyboardRemove())
    return CONTRACTOR_PLACE

async def contractor_place(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    context.user_data["place"] = update.message.text
    await update.message.reply_text("–ö–∞–∫–∏–µ —Ä–∞–±–æ—á–∏–µ –Ω—É–∂–Ω—ã?")
    return CONTRACTOR_WORKERS

async def contractor_workers(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    context.user_data["workers"] = update.message.text
    await update.message.reply_text("–ù–æ–º–µ—Ä –¥–ª—è —Å–≤—è–∑–∏?")
    return CONTRACTOR_CONTACT

async def contractor_contact(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    context.user_data["contact"] = update.message.text
    text = (
        f"üìå –ó–∞—è–≤–∫–∞ –æ—Ç –ø–æ–¥—Ä—è–¥—á–∏–∫–∞:\n"
        f"üìç –ú–µ—Å—Ç–æ: {context.user_data['place']}\n"
        f"üë∑ –†–∞–±–æ—á–∏–µ: {context.user_data['workers']}\n"
        f"üìû –ö–æ–Ω—Ç–∞–∫—Ç: {context.user_data['contact']}"
    )
    await context.bot.send_message(chat_id=CHANNEL_ID, text=text)
    await update.message.reply_text("‚úÖ –°–ø–∞—Å–∏–±–æ! –í–∞—à–∞ –∞–Ω–∫–µ—Ç–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞.\n–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ, –≤–≤–µ–¥–∏—Ç–µ /start.")
    return ConversationHandler.END

# --- –í–µ—Ç–≤—å –†–∞–±–æ—á–∏–π ---
async def worker(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    await update.message.reply_text("–ö–∞–∫–∞—è —É —Ç–µ–±—è —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å?", reply_markup=ReplyKeyboardRemove())
    return WORKER_SPECIALTY

async def worker_specialty(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    context.user_data["specialty"] = update.message.text
    await update.message.reply_text("–°–∫–æ–ª—å–∫–æ –¥–µ–Ω–µ–≥ –±–µ—Ä—ë—à—å –∑–∞ –µ–¥–∏–Ω–∏—Ü—É –∏–∑–º–µ—Ä–µ–Ω–∏—è?")
    return WORKER_RATE

async def worker_rate(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    context.user_data["rate"] = update.message.text
    await update.message.reply_text("–û—Å—Ç–∞–≤—å —Å–≤–æ–π –∫–æ–Ω—Ç–∞–∫—Ç –¥–ª—è —Å–≤—è–∑–∏:")
    return WORKER_CONTACT

async def worker_contact(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    context.user_data["contact"] = update.message.text
    text = (
        f"üìå –ê–Ω–∫–µ—Ç–∞ –æ—Ç —Ä–∞–±–æ—á–µ–≥–æ:\n"
        f"üë∑ –°–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å: {context.user_data['specialty']}\n"
        f"üí∞ –°—Ç–∞–≤–∫–∞: {context.user_data['rate']}\n"
        f"üìû –ö–æ–Ω—Ç–∞–∫—Ç: {context.user_data['contact']}"
    )
    await context.bot.send_message(chat_id=CHANNEL_ID, text=text)
    await update.message.reply_text("‚úÖ –°–ø–∞—Å–∏–±–æ! –í–∞—à–∞ –∞–Ω–∫–µ—Ç–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞.\n–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ, –≤–≤–µ–¥–∏—Ç–µ /start.")
    return ConversationHandler.END

# --- –í–µ—Ç–≤—å –î—Ä—É–≥–æ–µ ---
async def other(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    await context.bot.send_message(chat_id=CHANNEL_ID, text="‚ûï –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞: –î—Ä—É–≥–æ–µ")
    await update.message.reply_text("–°–ø–∞—Å–∏–±–æ! –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –ø–µ—Ä–µ–¥–∞–Ω–∞ –∞–¥–º–∏–Ω—É.\n–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ, –≤–≤–µ–¥–∏—Ç–µ /start.",
                                    reply_markup=ReplyKeyboardRemove())
    return ConversationHandler.END

# --- –û—Ç–º–µ–Ω–∞ ---
async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    await update.message.reply_text("–î–∏–∞–ª–æ–≥ –∑–∞–≤–µ—Ä—à—ë–Ω. –ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ, –≤–≤–µ–¥–∏ /start.",
                                    reply_markup=ReplyKeyboardRemove())
    return ConversationHandler.END

# --- –û—Å–Ω–æ–≤–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ ---
def main() -> None:
    application = Application.builder().token(BOT_TOKEN).build()

    conv_handler = ConversationHandler(
        entry_points=[CommandHandler("start", start)],
        states={
            CHOOSING: [
                MessageHandler(filters.Regex("^üë∑ –ü–æ–¥—Ä—è–¥—á–∏–∫$"), contractor),
                MessageHandler(filters.Regex("^‚öí –†–∞–±–æ—á–∏–π$"), worker),
                MessageHandler(filters.Regex("^‚ûï –î—Ä—É–≥–æ–µ$"), other),
            ],
            CONTRACTOR_PLACE: [MessageHandler(filters.TEXT & ~filters.COMMAND, contractor_place)],
            CONTRACTOR_WORKERS: [MessageHandler(filters.TEXT & ~filters.COMMAND, contractor_workers)],
            CONTRACTOR_CONTACT: [MessageHandler(filters.TEXT & ~filters.COMMAND, contractor_contact)],
            WORKER_SPECIALTY: [MessageHandler(filters.TEXT & ~filters.COMMAND, worker_specialty)],
            WORKER_RATE: [MessageHandler(filters.TEXT & ~filters.COMMAND, worker_rate)],
            WORKER_CONTACT: [MessageHandler(filters.TEXT & ~filters.COMMAND, worker_contact)],
        },
        fallbacks=[CommandHandler("cancel", cancel)],
    )

    application.add_handler(conv_handler)
    application.run_polling()

if __name__ == "__main__":
    main()

