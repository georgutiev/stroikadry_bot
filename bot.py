import os
from flask import Flask, request
from telegram import (
    Update, ReplyKeyboardMarkup, KeyboardButton
)
from telegram.ext import (
    Application, CommandHandler, MessageHandler, ConversationHandler,
    filters, ContextTypes
)

# --- –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã —à–∞–≥–æ–≤ –∞–Ω–∫–µ—Ç—ã ---
CHOOSING_ROLE, SPECIALTY, RATE, CONTACT = range(4)

# --- Flask-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ ---
app = Flask(__name__)

# --- –°–æ–∑–¥–∞—ë–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ Telegram ---
TOKEN = os.getenv("BOT_TOKEN")  # —Ç–æ–∫–µ–Ω –±–µ—Ä—ë—Ç—Å—è –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –Ω–∞ Render
application = Application.builder().token(TOKEN).build()

# --- –ö–æ–º–∞–Ω–¥–∞ —Å—Ç–∞—Ä—Ç ---
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [KeyboardButton("üë∑ –ü–æ–¥—Ä—è–¥—á–∏–∫"), KeyboardButton("‚öíÔ∏è –†–∞–±–æ—á–∏–π")],
        [KeyboardButton("‚ûï –î—Ä—É–≥–æ–µ")]
    ]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! üëã\n–í—ã–±–µ—Ä–∏—Ç–µ, –∫—Ç–æ –≤—ã:",
        reply_markup=reply_markup
    )
    return CHOOSING_ROLE

# --- –í—ã–±–æ—Ä —Ä–æ–ª–∏ ---
async def choose_role(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["role"] = update.message.text
    await update.message.reply_text("–£–∫–∞–∂–∏—Ç–µ –≤–∞—à—É —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å:")
    return SPECIALTY

# --- –í–≤–æ–¥ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏ ---
async def get_specialty(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["specialty"] = update.message.text
    await update.message.reply_text("–£–∫–∞–∂–∏—Ç–µ –≤–∞—à—É —Å—Ç–∞–≤–∫—É:")
    return RATE

# --- –í–≤–æ–¥ —Å—Ç–∞–≤–∫–∏ ---
async def get_rate(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["rate"] = update.message.text
    await update.message.reply_text("–£–∫–∞–∂–∏—Ç–µ –≤–∞—à –∫–æ–Ω—Ç–∞–∫—Ç (—Ç–µ–ª–µ—Ñ–æ–Ω –∏–ª–∏ Telegram):")
    return CONTACT

# --- –í–≤–æ–¥ –∫–æ–Ω—Ç–∞–∫—Ç–∞ –∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ ---
async def get_contact(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["contact"] = update.message.text

    role = context.user_data["role"]
    specialty = context.user_data["specialty"]
    rate = context.user_data["rate"]
    contact = context.user_data["contact"]

    text = (
        f"‚úÖ –°–ø–∞—Å–∏–±–æ! –í–∞—à–∞ –∞–Ω–∫–µ—Ç–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞.\n\n"
        f"üë∑ –†–æ–ª—å: {role}\n"
        f"üõ† –°–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å: {specialty}\n"
        f"üí∞ –°—Ç–∞–≤–∫–∞: {rate}\n"
        f"üìû –ö–æ–Ω—Ç–∞–∫—Ç: {contact}"
    )

    await update.message.reply_text(text)

    return ConversationHandler.END

# --- –û—Ç–º–µ–Ω–∞ ---
async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("‚ùå –ê–Ω–∫–µ—Ç–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞. –ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ, –Ω–∞–ø–∏—à–∏—Ç–µ /start")
    return ConversationHandler.END

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∞ ConversationHandler ---
conv_handler = ConversationHandler(
    entry_points=[CommandHandler("start", start)],
    states={
        CHOOSING_ROLE: [MessageHandler(filters.TEXT & ~filters.COMMAND, choose_role)],
        SPECIALTY: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_specialty)],
        RATE: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_rate)],
        CONTACT: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_contact)],
    },
    fallbacks=[CommandHandler("cancel", cancel)],
)

application.add_handler(conv_handler)

# --- Flask route –¥–ª—è Telegram Webhook ---
@app.route(f"/{TOKEN}", methods=["POST"])
async def webhook():
    update = Update.de_json(request.get_json(force=True), application.bot)
    await application.process_update(update)
    return "ok", 200

# --- Flask healthcheck ---
@app.route("/")
def index():
    return "–ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç!"

# --- –ó–∞–ø—É—Å–∫ ---
if __name__ == "__main__":
    port = int(os.environ.get("PORT", 10000))
    application.run_webhook(
        listen="0.0.0.0",
        port=port,
        url_path=TOKEN,
        webhook_url=f"https://{os.environ.get('RENDER_EXTERNAL_HOSTNAME')}/{TOKEN}"
    )
    app.run(host="0.0.0.0", port=port)
