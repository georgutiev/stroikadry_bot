import os
import logging
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    ApplicationBuilder, CommandHandler, ContextTypes,
    ConversationHandler, CallbackQueryHandler, MessageHandler, filters
)
from flask import Flask
import threading

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

BOT_TOKEN = os.getenv("BOT_TOKEN")
CHANNEL_ID = -1002155394225  # id —Ç–≤–æ–µ–≥–æ –∫–∞–Ω–∞–ª–∞

if not BOT_TOKEN:
    raise ValueError("‚ùå –£—Å—Ç–∞–Ω–æ–≤–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è BOT_TOKEN –Ω–∞ Render!")

# –°–æ—Å—Ç–æ—è–Ω–∏—è
ROLE, SPEC, PRICE, CONTACT_W, PLACE, NEED, CONTACT_C = range(7)

# Flask –¥–ª—è Render
app = Flask(__name__)

@app.route('/')
def home():
    return "Bot is running!"

# /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [InlineKeyboardButton("üë∑ –†–∞–±–æ—á–∏–π", callback_data="worker")],
        [InlineKeyboardButton("üèó –ü–æ–¥—Ä—è–¥—á–∏–∫", callback_data="contractor")]
    ]
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –í—ã–±–µ—Ä–∏, –∫—Ç–æ —Ç—ã:",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )
    return ROLE

# –†–æ–ª—å
async def role_chosen(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    context.user_data["role"] = query.data

    if query.data == "worker":
        await query.edit_message_text("‚úçÔ∏è –í–≤–µ–¥–∏ —Å–≤–æ—é —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å:")
        return SPEC
    else:
        await query.edit_message_text("üìç –ì–¥–µ –Ω—É–∂–Ω—ã —Ä–∞–±–æ—á–∏–µ?")
        return PLACE

# –†–∞–±–æ—á–∏–π ‚Äî —Å–ø–µ—Ü
async def worker_spec(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["spec"] = update.message.text
    await update.message.reply_text("üí∞ –°–∫–æ–ª—å–∫–æ –¥–µ–Ω–µ–≥ –ø—Ä–æ—Å–∏—à—å (—Å—Ç–∞–≤–∫–∞ –∑–∞ –µ–¥.)?")
    return PRICE

# –†–∞–±–æ—á–∏–π ‚Äî —Å—Ç–∞–≤–∫–∞
async def worker_price(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["price"] = update.message.text
    await update.message.reply_text("üìû –û—Å—Ç–∞–≤—å –Ω–æ–º–µ—Ä –∏–ª–∏ @username:")
    return CONTACT_W

# –†–∞–±–æ—á–∏–π ‚Äî –∫–æ–Ω—Ç–∞–∫—Ç
async def worker_contact(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["contact"] = update.message.text
    spec = context.user_data["spec"]
    price = context.user_data["price"]
    contact = context.user_data["contact"]

    text = (
        f"‚úÖ –ù–æ–≤–∞—è –∞–Ω–∫–µ—Ç–∞:\n\n"
        f"üë∑ –†–∞–±–æ—á–∏–π\n"
        f"üõ† –°–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å: {spec}\n"
        f"üí∞ –°—Ç–∞–≤–∫–∞: {price}\n"
        f"üìû –ö–æ–Ω—Ç–∞–∫—Ç: {contact}"
    )
    await update.message.reply_text("–°–ø–∞—Å–∏–±–æ! –í–∞—à–∞ –∞–Ω–∫–µ—Ç–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞.")
    await context.bot.send_message(chat_id=CHANNEL_ID, text=text)
    return ConversationHandler.END

# –ü–æ–¥—Ä—è–¥—á–∏–∫ ‚Äî –º–µ—Å—Ç–æ
async def contractor_place(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["place"] = update.message.text
    await update.message.reply_text("üë∑ –ö–∞–∫–∏–µ —Ä–∞–±–æ—á–∏–µ –Ω—É–∂–Ω—ã?")
    return NEED

# –ü–æ–¥—Ä—è–¥—á–∏–∫ ‚Äî –Ω—É–∂–Ω—ã–µ
async def contractor_need(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["need"] = update.message.text
    await update.message.reply_text("üìû –û—Å—Ç–∞–≤—å –Ω–æ–º–µ—Ä –∏–ª–∏ @username:")
    return CONTACT_C

# –ü–æ–¥—Ä—è–¥—á–∏–∫ ‚Äî –∫–æ–Ω—Ç–∞–∫—Ç
async def contractor_contact(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["contact"] = update.message.text
    place = context.user_data["place"]
    need = context.user_data["need"]
    contact = context.user_data["contact"]

    text = (
        f"‚úÖ –ù–æ–≤–∞—è –∞–Ω–∫–µ—Ç–∞:\n\n"
        f"üèó –ü–æ–¥—Ä—è–¥—á–∏–∫\n"
        f"üìç –û–±—ä–µ–∫—Ç: {place}\n"
        f"üë∑ –ù—É–∂–Ω—ã: {need}\n"
        f"üìû –ö–æ–Ω—Ç–∞–∫—Ç: {contact}"
    )
    await update.message.reply_text("–°–ø–∞—Å–∏–±–æ! –í–∞—à–∞ –∞–Ω–∫–µ—Ç–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞.")
    await context.bot.send_message(chat_id=CHANNEL_ID, text=text)
    return ConversationHandler.END

# –û—Ç–º–µ–Ω–∞
async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.")
    return ConversationHandler.END

def run_bot():
    tg_app = ApplicationBuilder().token(BOT_TOKEN).build()

    conv_handler = ConversationHandler(
        entry_points=[CommandHandler("start", start)],
        states={
            ROLE: [CallbackQueryHandler(role_chosen)],
            SPEC: [MessageHandler(filters.TEXT & ~filters.COMMAND, worker_spec)],
            PRICE: [MessageHandler(filters.TEXT & ~filters.COMMAND, worker_price)],
            CONTACT_W: [MessageHandler(filters.TEXT & ~filters.COMMAND, worker_contact)],
            PLACE: [MessageHandler(filters.TEXT & ~filters.COMMAND, contractor_place)],
            NEED: [MessageHandler(filters.TEXT & ~filters.COMMAND, contractor_need)],
            CONTACT_C: [MessageHandler(filters.TEXT & ~filters.COMMAND, contractor_contact)],
        },
        fallbacks=[CommandHandler("cancel", cancel)],
    )

    tg_app.add_handler(conv_handler)
    tg_app.run_polling()

if __name__ == "__main__":
    threading.Thread(target=run_bot).start()
    app.run(host="0.0.0.0", port=int(os.getenv("PORT", 10000)))
