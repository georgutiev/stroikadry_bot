import os
from flask import Flask, request
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, MessageHandler, filters, ContextTypes, ConversationHandler

BOT_TOKEN = os.getenv("BOT_TOKEN")
CHANNEL_ID = os.getenv("CHANNEL_ID")

if not BOT_TOKEN:
    raise ValueError("‚ùå –£—Å—Ç–∞–Ω–æ–≤–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è BOT_TOKEN –Ω–∞ Render!")
if not CHANNEL_ID:
    raise ValueError("‚ùå –£—Å—Ç–∞–Ω–æ–≤–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è CHANNEL_ID –Ω–∞ Render!")

# Flask –¥–ª—è webhook
app = Flask(__name__)

# –°–æ—Å—Ç–æ—è–Ω–∏—è
CHOOSING, CONTRACTOR_LOCATION, CONTRACTOR_WORKERS, CONTRACTOR_PHONE, WORKER_PROFILE, WORKER_PRICE, WORKER_PHONE = range(7)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [InlineKeyboardButton("üë∑ –ü–æ–¥—Ä—è–¥—á–∏–∫", callback_data="contractor")],
        [InlineKeyboardButton("üî® –†–∞–±–æ—á–∏–π", callback_data="worker")]
    ]
    await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç! –í—ã–±–µ—Ä–∏, –∫—Ç–æ —Ç—ã:", reply_markup=InlineKeyboardMarkup(keyboard))
    return CHOOSING

async def choose_role(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    role = query.data
    context.user_data["role"] = role

    if role == "contractor":
        await query.edit_message_text("üìç –ì–¥–µ –Ω—É–∂–Ω—ã —Ä–∞–±–æ—á–∏–µ?")
        return CONTRACTOR_LOCATION
    else:
        await query.edit_message_text("üë∑ –ö–∞–∫–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç?")
        return WORKER_PROFILE

async def contractor_location(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["location"] = update.message.text
    await update.message.reply_text("üîß –ö–∞–∫–∏–µ —Ä–∞–±–æ—á–∏–µ –Ω—É–∂–Ω—ã?")
    return CONTRACTOR_WORKERS

async def contractor_workers(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["workers"] = update.message.text
    await update.message.reply_text("üìû –£–∫–∞–∂–∏ –Ω–æ–º–µ—Ä –¥–ª—è —Å–≤—è–∑–∏:")
    return CONTRACTOR_PHONE

async def contractor_phone(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["phone"] = update.message.text

    text = (f"üì¢ –ó–∞—è–≤–∫–∞ –æ—Ç –ø–æ–¥—Ä—è–¥—á–∏–∫–∞:
"
            f"üìç –ú–µ—Å—Ç–æ: {context.user_data['location']}
"
            f"üë∑ –ù—É–∂–Ω—ã: {context.user_data['workers']}
"
            f"üìû –ö–æ–Ω—Ç–∞–∫—Ç: {context.user_data['phone']}")
    await update.message.reply_text("‚úÖ –ó–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –≤ –∫–∞–Ω–∞–ª!")
    await context.bot.send_message(chat_id=CHANNEL_ID, text=text)
    return ConversationHandler.END

async def worker_profile(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["profile"] = update.message.text
    await update.message.reply_text("üí∞ –°–∫–æ–ª—å–∫–æ –¥–µ–Ω–µ–≥ –∑–∞ –µ–¥. –∏–∑–º–µ—Ä–µ–Ω–∏—è?")
    return WORKER_PRICE

async def worker_price(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["price"] = update.message.text
    await update.message.reply_text("üìû –£–∫–∞–∂–∏ –Ω–æ–º–µ—Ä –¥–ª—è —Å–≤—è–∑–∏:")
    return WORKER_PHONE

async def worker_phone(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["phone"] = update.message.text

    text = (f"üì¢ –ó–∞—è–≤–∫–∞ –æ—Ç —Ä–∞–±–æ—á–µ–≥–æ:
"
            f"üë∑ –ü—Ä–æ—Ñ–∏–ª—å: {context.user_data['profile']}
"
            f"üí∞ –¶–µ–Ω–∞: {context.user_data['price']}
"
            f"üìû –ö–æ–Ω—Ç–∞–∫—Ç: {context.user_data['phone']}")
    await update.message.reply_text("‚úÖ –ê–Ω–∫–µ—Ç–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –≤ –∫–∞–Ω–∞–ª!")
    await context.bot.send_message(chat_id=CHANNEL_ID, text=text)
    return ConversationHandler.END

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("‚ùå –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –∞–Ω–∫–µ—Ç—ã –æ—Ç–º–µ–Ω–µ–Ω–æ. –ù–∞–ø–∏—à–∏ /start, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ.")
    return ConversationHandler.END

def main():
    application = Application.builder().token(BOT_TOKEN).build()

    conv_handler = ConversationHandler(
        entry_points=[CommandHandler("start", start)],
        states={
            CHOOSING: [CallbackQueryHandler(choose_role)],
            CONTRACTOR_LOCATION: [MessageHandler(filters.TEXT & ~filters.COMMAND, contractor_location)],
            CONTRACTOR_WORKERS: [MessageHandler(filters.TEXT & ~filters.COMMAND, contractor_workers)],
            CONTRACTOR_PHONE: [MessageHandler(filters.TEXT & ~filters.COMMAND, contractor_phone)],
            WORKER_PROFILE: [MessageHandler(filters.TEXT & ~filters.COMMAND, worker_profile)],
            WORKER_PRICE: [MessageHandler(filters.TEXT & ~filters.COMMAND, worker_price)],
            WORKER_PHONE: [MessageHandler(filters.TEXT & ~filters.COMMAND, worker_phone)],
        },
        fallbacks=[CommandHandler("cancel", cancel)]
    )
    application.add_handler(conv_handler)

    # Flask endpoint –¥–ª—è Telegram webhook
    @app.route(f"/{BOT_TOKEN}", methods=["POST"])
    def webhook():
        update = Update.de_json(request.get_json(force=True), application.bot)
        application.update_queue.put_nowait(update)
        return "ok", 200

    # –ó–∞–ø—É—Å–∫ Flask
    app.run(host="0.0.0.0", port=int(os.environ.get("PORT", 5000)))

if __name__ == "__main__":
    main()
