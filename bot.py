–î—Ä—É–≥, [14.09.2025 17:45]
import os
from telegram import (
    Update,
    InlineKeyboardMarkup,
    InlineKeyboardButton,
)
from telegram.ext import (
    Application,
    CommandHandler,
    CallbackQueryHandler,
    MessageHandler,
    ConversationHandler,
    ContextTypes,
    filters,
)
from flask import Flask, request

# === –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã ===
BOT_TOKEN = os.getenv("BOT_TOKEN")
CHANNEL_ID = -1002155394225  # ID –∫–∞–Ω–∞–ª–∞
if not BOT_TOKEN:
    raise ValueError("‚ùå –£—Å—Ç–∞–Ω–æ–≤–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è BOT_TOKEN –Ω–∞ Render!")

# –≠—Ç–∞–ø—ã –∞–Ω–∫–µ—Ç—ã
CHOOSING_ROLE, CONTRACTOR_STEP1, CONTRACTOR_STEP2, CONTRACTOR_STEP3, \
WORKER_STEP1, WORKER_STEP2, WORKER_STEP3 = range(7)

# === Flask –¥–ª—è Webhook ===
app = Flask(__name__)
telegram_app = Application.builder().token(BOT_TOKEN).build()


# === –ö–æ–º–∞–Ω–¥–∞ /start ===
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [InlineKeyboardButton("üë∑ –ü–æ–¥—Ä—è–¥—á–∏–∫", callback_data="contractor")],
        [InlineKeyboardButton("‚öíÔ∏è –†–∞–±–æ—á–∏–π", callback_data="worker")],
    ]
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –í—ã–±–µ—Ä–∏, –∫—Ç–æ —Ç—ã:",
        reply_markup=InlineKeyboardMarkup(keyboard),
    )
    return CHOOSING_ROLE


# === –í—ã–±–æ—Ä –ø–æ–¥—Ä—è–¥—á–∏–∫/—Ä–∞–±–æ—á–∏–π ===
async def choose_role(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    if query.data == "contractor":
        await query.edit_message_text("üèó –ì–¥–µ –Ω—É–∂–Ω—ã —Ä–∞–±–æ—á–∏–µ?")
        return CONTRACTOR_STEP1

    elif query.data == "worker":
        await query.edit_message_text("üîß –ö–∞–∫–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç?")
        return WORKER_STEP1


# === –ü–æ–¥—Ä—è–¥—á–∏–∫: —à–∞–≥–∏ –∞–Ω–∫–µ—Ç—ã ===
async def contractor_step1(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["place"] = update.message.text
    await update.message.reply_text("üë∑‚Äç‚ôÇÔ∏è –ö–∞–∫–∏–µ —Ä–∞–±–æ—á–∏–µ –Ω—É–∂–Ω—ã?")
    return CONTRACTOR_STEP2


async def contractor_step2(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["workers"] = update.message.text
    await update.message.reply_text("üìû –ù–æ–º–µ—Ä –¥–ª—è —Å–≤—è–∑–∏?")
    return CONTRACTOR_STEP3


async def contractor_step3(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["contact"] = update.message.text

    text = (
        "‚úÖ –ó–∞—è–≤–∫–∞ –æ—Ç –ø–æ–¥—Ä—è–¥—á–∏–∫–∞:\n"
        f"üèó –ì–¥–µ –Ω—É–∂–Ω—ã —Ä–∞–±–æ—á–∏–µ: {context.user_data['place']}\n"
        f"üë∑‚Äç‚ôÇÔ∏è –ö—Ç–æ –Ω—É–∂–µ–Ω: {context.user_data['workers']}\n"
        f"üìû –ö–æ–Ω—Ç–∞–∫—Ç: {context.user_data['contact']}"
    )

    await update.message.reply_text("–°–ø–∞—Å–∏–±–æ! –í–∞—à–∞ –∞–Ω–∫–µ—Ç–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞.")
    await telegram_app.bot.send_message(chat_id=CHANNEL_ID, text=text)
    return ConversationHandler.END


# === –†–∞–±–æ—á–∏–π: —à–∞–≥–∏ –∞–Ω–∫–µ—Ç—ã ===
async def worker_step1(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["specialty"] = update.message.text
    await update.message.reply_text("üí∞ –°–∫–æ–ª—å–∫–æ –¥–µ–Ω–µ–≥ –∑–∞ —Ä–∞–±–æ—Ç—É (–µ–¥. –∏–∑–º.)?")
    return WORKER_STEP2


async def worker_step2(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["rate"] = update.message.text
    await update.message.reply_text("üìû –ù–æ–º–µ—Ä –¥–ª—è —Å–≤—è–∑–∏?")
    return WORKER_STEP3


async def worker_step3(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["contact"] = update.message.text

    text = (
        "‚úÖ –ê–Ω–∫–µ—Ç–∞ —Ä–∞–±–æ—á–µ–≥–æ:\n"
        f"üë∑‚Äç‚ôÇÔ∏è –°–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å: {context.user_data['specialty']}\n"
        f"üí∞ –°—Ç–∞–≤–∫–∞: {context.user_data['rate']}\n"
        f"üìû –ö–æ–Ω—Ç–∞–∫—Ç: {context.user_data['contact']}"
    )

    await update.message.reply_text("–°–ø–∞—Å–∏–±–æ! –í–∞—à–∞ –∞–Ω–∫–µ—Ç–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞.")
    await telegram_app.bot.send_message(chat_id=CHANNEL_ID, text=text)
    return ConversationHandler.END


# === –û—Ç–º–µ–Ω–∞ ===
async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("‚ùå –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
    return ConversationHandler.END


# === –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Ö–µ–Ω–¥–ª–µ—Ä–æ–≤ ===
conv_handler = ConversationHandler(
    entry_points=[CommandHandler("start", start)],
    states={
        CHOOSING_ROLE: [CallbackQueryHandler(choose_role)],
        CONTRACTOR_STEP1: [MessageHandler(filters.TEXT & ~filters.

–î—Ä—É–≥, [14.09.2025 17:45]
COMMAND, contractor_step1)],
        CONTRACTOR_STEP2: [MessageHandler(filters.TEXT & ~filters.COMMAND, contractor_step2)],
        CONTRACTOR_STEP3: [MessageHandler(filters.TEXT & ~filters.COMMAND, contractor_step3)],
        WORKER_STEP1: [MessageHandler(filters.TEXT & ~filters.COMMAND, worker_step1)],
        WORKER_STEP2: [MessageHandler(filters.TEXT & ~filters.COMMAND, worker_step2)],
        WORKER_STEP3: [MessageHandler(filters.TEXT & ~filters.COMMAND, worker_step3)],
    },
    fallbacks=[CommandHandler("cancel", cancel)],
)

telegram_app.add_handler(conv_handler)


# === Flask endpoint –¥–ª—è Webhook ===
@app.route(f"/{BOT_TOKEN}", methods=["POST"])
def webhook():
    update = Update.de_json(request.get_json(force=True), telegram_app.bot)
    telegram_app.update_queue.put_nowait(update)
    return "ok"


if name == "__main__":
    import threading

    # –ó–∞–ø—É—Å–∫–∞–µ–º Telegram-–±–æ—Ç–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
    threading.Thread(target=lambda: telegram_app.run_webhook(
        listen="0.0.0.0",
        port=int(os.getenv("PORT", 10000)),
        url_path=BOT_TOKEN,
        webhook_url=f"https://{os.getenv('RENDER_EXTERNAL_HOSTNAME')}/{BOT_TOKEN}"
    )).start()

    # –ó–∞–ø—É—Å–∫–∞–µ–º Flask
    app.run(host="0.0.0.0", port=int(os.getenv("PORT", 10000)))
