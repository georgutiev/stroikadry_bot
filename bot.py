import os
import logging
from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    ConversationHandler,
    ContextTypes,
    filters,
)

# ==============================
# üîπ –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
# ==============================
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    level=logging.INFO,
)
logger = logging.getLogger(__name__)

# ==============================
# üîπ –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
# ==============================
BOT_TOKEN = os.getenv("BOT_TOKEN")
CHANNEL_ID = -1002155394225  # ID –∫–∞–Ω–∞–ª–∞ @StroiKadry15

if not BOT_TOKEN:
    raise ValueError("‚ùå –£—Å—Ç–∞–Ω–æ–≤–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è BOT_TOKEN –Ω–∞ Render!")

# ==============================
# üîπ –°–æ—Å—Ç–æ—è–Ω–∏—è
# ==============================
ROLE, CONTRACTOR_PLACE, CONTRACTOR_NEED, CONTRACTOR_CONTACT, WORKER_SPEC, WORKER_PRICE, WORKER_CONTACT, OTHER = range(8)

# ==============================
# üîπ /start
# ==============================
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [["üë∑ –ü–æ–¥—Ä—è–¥—á–∏–∫", "üõ† –†–∞–±–æ—á–∏–π", "‚ûï –î—Ä—É–≥–æ–µ"]]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç! –í—ã–±–µ—Ä–∏, –∫—Ç–æ —Ç—ã:", reply_markup=reply_markup)
    return ROLE

# ==============================
# üîπ –í—ã–±–æ—Ä —Ä–æ–ª–∏
# ==============================
async def choose_role(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text
    if text == "üë∑ –ü–æ–¥—Ä—è–¥—á–∏–∫":
        await update.message.reply_text("–£–∫–∞–∂–∏, –≥–¥–µ –Ω—É–∂–Ω—ã —Ä–∞–±–æ—á–∏–µ (–≥–æ—Ä–æ–¥/–æ–±—ä–µ–∫—Ç):")
        return CONTRACTOR_PLACE
    elif text == "üõ† –†–∞–±–æ—á–∏–π":
        await update.message.reply_text("–£–∫–∞–∂–∏ —Å–≤–æ—é —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å (–ø—Ä–æ—Ñ–∏–ª—å):")
        return WORKER_SPEC
    elif text == "‚ûï –î—Ä—É–≥–æ–µ":
        await update.message.reply_text("–ù–∞–ø–∏—à–∏, —á—Ç–æ –∏–º–µ–Ω–Ω–æ —Ç–µ–±–µ –Ω—É–∂–Ω–æ:")
        return OTHER
    else:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ.")
        return ROLE

# ==============================
# üîπ –ü–æ–¥—Ä—è–¥—á–∏–∫
# ==============================
async def contractor_place(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["place"] = update.message.text
    await update.message.reply_text("–ö–∞–∫–∏–µ —Ä–∞–±–æ—á–∏–µ –Ω—É–∂–Ω—ã (—Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å)?")
    return CONTRACTOR_NEED

async def contractor_need(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["need"] = update.message.text
    await update.message.reply_text("–û—Å—Ç–∞–≤—å –Ω–æ–º–µ—Ä –¥–ª—è —Å–≤—è–∑–∏:")
    return CONTRACTOR_CONTACT

async def contractor_contact(update: Update, context: ContextTypes.DEFAULT_TYPE):
    place = context.user_data["place"]
    need = context.user_data["need"]
    contact = update.message.text

    text_user = f"‚úÖ –°–ø–∞—Å–∏–±–æ! –í–∞—à–∞ –∑–∞—è–≤–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞.\nüìç –ú–µ—Å—Ç–æ: {place}\nüë∑ –ù—É–∂–Ω—ã: {need}\nüìû –ö–æ–Ω—Ç–∞–∫—Ç: {contact}"
    await update.message.reply_text(text_user)

    text_channel = f"üì¢ –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –æ—Ç –ø–æ–¥—Ä—è–¥—á–∏–∫–∞\nüìç –ú–µ—Å—Ç–æ: {place}\nüë∑ –ù—É–∂–Ω—ã: {need}\nüìû –ö–æ–Ω—Ç–∞–∫—Ç: {contact}"
    await context.bot.send_message(chat_id=CHANNEL_ID, text=text_channel)

    return ConversationHandler.END

# ==============================
# üîπ –†–∞–±–æ—á–∏–π
# ==============================
async def worker_spec(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["spec"] = update.message.text
    await update.message.reply_text("–£–∫–∞–∂–∏ —Å—Ç–æ–∏–º–æ—Å—Ç—å –∑–∞ –µ–¥–∏–Ω–∏—Ü—É —Ä–∞–±–æ—Ç—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä 3000‚ÇΩ/–¥–µ–Ω—å):")
    return WORKER_PRICE

async def worker_price(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["price"] = update.message.text
    await update.message.reply_text("–û—Å—Ç–∞–≤—å –Ω–æ–º–µ—Ä –¥–ª—è —Å–≤—è–∑–∏:")
    return WORKER_CONTACT

async def worker_contact(update: Update, context: ContextTypes.DEFAULT_TYPE):
    spec = context.user_data["spec"]
    price = context.user_data["price"]
    contact = update.message.text

    text_user = f"‚úÖ –°–ø–∞—Å–∏–±–æ! –í–∞—à–∞ –∞–Ω–∫–µ—Ç–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞.\nüë∑ –°–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å: {spec}\nüí∞ –°—Ç–∞–≤–∫–∞: {price}\nüìû –ö–æ–Ω—Ç–∞–∫—Ç: {contact}"
    await update.message.reply_text(text_user)

    text_channel = f"üì¢ –ù–æ–≤–∞—è –∞–Ω–∫–µ—Ç–∞ –æ—Ç —Ä–∞–±–æ—á–µ–≥–æ\nüë∑ –°–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å: {spec}\nüí∞ –°—Ç–∞–≤–∫–∞: {price}\nüìû –ö–æ–Ω—Ç–∞–∫—Ç: {contact}"
    await context.bot.send_message(chat_id=CHANNEL_ID, text=text_channel)

    return ConversationHandler.END

# ==============================
# üîπ –î—Ä—É–≥–æ–µ
# ==============================
async def other(update: Update, context: ContextTypes.DEFAULT_TYPE):
    other_text = update.message.text
    text_user = f"‚úÖ –°–ø–∞—Å–∏–±–æ! –ú—ã —Å–æ—Ö—Ä–∞–Ω–∏–ª–∏ —Ç–≤–æ–π –∑–∞–ø—Ä–æ—Å: {other_text}"
    await update.message.reply_text(text_user)

    text_channel = f"üì¢ –ù–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å (–î—Ä—É–≥–æ–µ)\nüìù {other_text}"
    await context.bot.send_message(chat_id=CHANNEL_ID, text=text_channel)

    return ConversationHandler.END

# ==============================
# üîπ –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
# ==============================
def main():
    app = Application.builder().token(BOT_TOKEN).build()

    conv_handler = ConversationHandler(
        entry_points=[CommandHandler("start", start)],
        states={
            ROLE: [MessageHandler(filters.TEXT & ~filters.COMMAND, choose_role)],
            CONTRACTOR_PLACE: [MessageHandler(filters.TEXT & ~filters.COMMAND, contractor_place)],
            CONTRACTOR_NEED: [MessageHandler(filters.TEXT & ~filters.COMMAND, contractor_need)],
            CONTRACTOR_CONTACT: [MessageHandler(filters.TEXT & ~filters.COMMAND, contractor_contact)],
            WORKER_SPEC: [MessageHandler(filters.TEXT & ~filters.COMMAND, worker_spec)],
            WORKER_PRICE: [MessageHandler(filters.TEXT & ~filters.COMMAND, worker_price)],
            WORKER_CONTACT: [MessageHandler(filters.TEXT & ~filters.COMMAND, worker_contact)],
            OTHER: [MessageHandler(filters.TEXT & ~filters.COMMAND, other)],
        },
        fallbacks=[CommandHandler("start", start)],
    )

    app.add_handler(conv_handler)
    logger.info("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω —á–µ—Ä–µ–∑ polling...")
    app.run_polling()

if __name__ == "__main__":
    main()
